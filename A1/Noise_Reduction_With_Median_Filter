.global _start
input_image: 
	.word 1057442138,  2410420899, 519339369,  2908788659, 1532551093, 4249151175, 4148718620, 788746931,  3777110853, 2023451652
	.word 3000595192,   1424215634, 3130581119, 3415585405, 2359913843, 1600975764, 1368061213, 2330908780, 3460755284, 464067332
	.word 2358850436,   1191202723, 2461113486, 3373356749, 3070515869, 4219460496, 1464115644, 3200205016, 1316921258, 143509283
	.word 3846979011,   2393794600, 618297079,  2016233561, 3509496510, 1966263545, 568123240,  4091698540, 2472059715, 2420085477
	.word 395970857,    2217766702, 44993357,   694287440,  2233438483, 1231031852, 2612978931, 1464238350, 3373257252, 2418760426
	.word 4005861356,   288491815, 3533591053,  754133199,  3745088714, 2711399263, 2291899825, 2117953337, 1710526325, 1989628126
	.word 465096977,    3100163617, 195551247,  3884399959, 422483884,  2154571543, 3380017320, 380355875,  4161422042, 654077379
	.word 2168260534,   3266157063, 3870711524, 2809320128, 3980588369, 2342816349, 1283915395, 122534782,  4270863000, 2232709752
	.word 1946888581,   1956399250, 3892336886, 1456853217, 3602595147, 1756931089, 858680934,  2326906362, 2258756188, 1125912976
	.word 1883735002,   1851212965, 3925218056, 2270198189, 3481512846, 1685364533, 1411965810, 3850049461, 3023321890, 2815055881
output: .space 144
window: .space 100

_start:
	LDR R0, =output
	LDR R1, =window
	LDR R2, =input_image
	
	PUSH {LR}
	BL median_filter //call subroutine
	POP {LR}
	
_end_start:
	B _end_start

//subroutine:median_filter
median_filter:
	PUSH {R3-R12}
	
	MOV R3, #0 //k=0
win_k:
	CMP R3,#6 //6*6 windows
	BGE _end_win_k //most outer loop finished: get 36 windows
	
//win_l{

	PUSH {R7,R8}
	MOV R4,#0 //l=0
	MOV R8,#0 //clear window pointer before loop
win_l:
	CMP R4,#6
	BGE _end_win_l
	MOV R7,#10
	MUL R8,R7,R3 //10k
	ADD R8,R8,R4 //win_ptr=10k+l (index of current window)
	
  //win_i{
	MOV R5, #0//i=0
win_i:
	CMP R5,#5
	BGE _end_win_i
	
	//win_j{
	PUSH {R7,R9,R10}
	MOV R6, #0//j=0
	MOV R9, #0
win_j:
	CMP R6,#5
	BGE _end_win_j
	MOV R7,#10
	MUL R9,R7,R5 //10i
	ADD R9,R9,R8 //10i+win_ptr
	ADD R9,R9,R6 //10i+win_ptr+j (index of input image based on current window)
	LDR R10, [R2,R9,LSL#2] //R10[]=input_image[abs]
	MOV R7,#5
	MOV R9,#0
	MUL R9,R7,R5//5i
	ADD R9,R9,R6//5i+j (store the input num. in correct position in the 5*5 window)
	STR R10,[R1,R9,LSL#2] //window[]=input_image[abs]
	ADD R6,R6,#1//j++
	B win_j
_end_win_j:
	POP {R7,R9,R10}
	//}
	
	ADD R5,R5,#1//i++
	B win_i
_end_win_i:
	PUSH {LR}
	BL sort_rgb
	POP {LR}
  //}
  	PUSH {R8}
	MOV R8,#6
	MLA R8,R3,R8,R4//R8=6*k+l (index of the correct postion that the sorted final values should go)
	STR R12, [R0,R8,LSL#2]//store medians into output (one window done)
	POP {R8}
	ADD R4,R4,#1//l
	B win_l
_end_win_l: 
	POP {R7,R8}
//}

	ADD R3,R3,#1 //k++
	B win_k
_end_win_k:
	POP {R3-R12}
	BX LR

//subroutine:sort_rgb
sort_rgb:
	PUSH {R7,R8,R9,R10,R11}
	
	MOV R7,#0
	MOV R12,#0//make sure pixel median result starts with 0
sortLoop:
	CMP R7, #4//r7<4, cuz rgba: four times in total
	BGE _end_sort_loop
	PUSH {LR}
	BL insertionSort//sort R firstly (no need to shift for the first)
	POP {LR}
	MOV R9,#12//index of median
	LDR R8,[R1,R9,LSL#2]//get median
	LSR R8,R8,#24//get sorted correct value (rgba one by one)
	MOV R11,#3//R11=3
	SUB R9, R11,R7//R9=3-i
	MOV R11,#8//R11=8
	MUL R9,R9,R11//R9=(3-i)*8
	LSL R8,R8,R9 //shift the correct value back, make sure median wont be overwritten and will be in the same 'rgba order'
	ADD R12,R12,R8
	//--------------------------------
	PUSH {LR}
	BL shifterLoop
	POP {LR}
	//-----------------------------

	ADD R7,R7,#1//R7++
	B sortLoop
_end_sort_loop:
	POP {R7,R8,R9,R10,R11}
	BX LR //next window

//subroutine:insertionSort
insertionSort:
	PUSH {R8,R9,R10,R11,R12}
	MOV R8,#1//sort_i=1
forLoop:
	CMP R8, #25//size
	BGE STOP
	LDR R9,[R1,R8,LSL#2]
	MOV R10,R8//sort_j=sort_i
	B whileLoop
whileLoop:
	CMP R10, #0
	BLE ELSE
	SUB R11,R10,#1//j-1
	LDR R12, [R1,R11,LSL#2]
	CMP R12, R9//[j-1] and value
	BLS ELSE//cmp unsigned!!
	STR R12, [R1,R10,LSL#2]//sorted store into R1ï¼ˆwindow)
	SUB R10,R10,#1//sort_j--
	B whileLoop
ELSE:
	ADD R8,R8,#1//sort_i++
	STR R9, [R1,R10,LSL#2]//[j]=value
	B forLoop
STOP:
	POP {R8,R9,R10,R11,R12}
	BX LR
	
	
shifterLoop:
	PUSH {R11,R12}
	MOV R11, #0
shifter:
	CMP R11, #25
	BGE _end_shifter
	LDR R12, [R1, R11, LSL#2]//get num. from extracted windows
	LSL R12,R12,#8 //shift 25 num.s to the next value (g..b..a)
	STR R12, [R1,R11,LSL#2]//store in R1, be prepared to be sorted
	ADD R11,R11,#1//R11++
	B shifter
_end_shifter:
	POP {R11,R12}
	BX LR
	
