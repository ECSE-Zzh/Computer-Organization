.global _start

.equ HEX0_TO_3, 0xFF200020
.equ HEX4_TO_5, 0xFF200030
.equ PB0_TO_3, 0xFF200050 
.equ EDG_CAP, 0xFF20005C
.equ LOAD_REG, 0xFFFEC600
.equ COUNT_REG, 0xFFFEC604
.equ CTR_REG, 0xFFFEC608
.equ INT_REG, 0xFFFEC60C

_start:

	BL ARM_TIM_config_ASM
	
HEX_default:
	PUSH {R11,R12}
	LDR R12, =HEX0_TO_3
	MOV R11, #0x3f
	
	STRB R11, [R12]
	ADD R12,R12,#1
	
	STRB R11, [R12]
	ADD R12,R12,#1
	
	STRB R11, [R12]
	ADD R12,R12,#1
	
	STRB R11, [R12]
	ADD R12,R12,#1
	
	LDR R12, =HEX4_TO_5
		
	STRB R11, [R12]
	ADD R12,R12,#1
	
	STRB R11, [R12]
	ADD R12,R12,#1
	
	POP {R11,R12}
	MOV R7, #0
	MOV R8, #0
	MOV R9, #0
	MOV R10, #0
	MOV R11, #0
	MOV R12, #0
	
PB0:
	MOV R4, #0x1
	BL PB_edgecp_is_pressed
	MOVNE R0, #1
	CMP R0, #1
	MOVEQ R0, #0
	BEQ check_int
	//BNE PB0
	//BL PB_edgecp_is_pressed
	//CMP R0, #1
	//BLEQ PB_clear_edgecp_ASM
	//MOVEQ R0, #0
			
PB1:
	MOV R4, #0x2
	BL PB_edgecp_is_pressed
	MOVNE R0, #2
	CMP R0, #2
	//MOVEQ R0, #0
	//BEQ check_int
	BLEQ PB_clear_edgecp_ASM
	MOVEQ R0, #0
	B PB2
	
PB2:
	MOV R4, #0x4
	BL PB_edgecp_is_pressed
	MOVNE R0, #3
	CMP R0,#3
	//MOVEQ R0, #0
	BLEQ PB_clear_edgecp_ASM
	MOVEQ R0, #0
	BEQ HEX_default
	B PB0

PB_edgecp_is_pressed: 
	PUSH {R1, LR}
	LDR R1, =EDG_CAP   
    LDRB R3, [R1]    
	TST R3, R4 //R8 state now (from read),R9 check PB Num.
	//MOVNE R0, #1
	POP {R1, LR}
	BX LR
	
PB_clear_edgecp_ASM:
	PUSH {R1, LR}
	LDR R1, =EDG_CAP
	LDRB R3, [R1]
	STRB R3, [R1]
	POP {R1, LR}
	BX LR


//////////////----------------------------------------//////////////////////////

check_int:
	BL ARM_TIM_read_INT_ASM
	CMP R3, #1	
	BNE check_int
	ADD R11, R11, #1
	BL ARM_TIM_clear_INT_ASM
	//CMP R11, #11
	//MOVEQ R11, #0
	MOV R0, #0
	
mili_sec:
	MOV R5, #1
	CMP R11, #10
	//MOVGE R11, #0
	BLGE HEX_write_ASM
	BGE uni_sec
	BLLE HEX_write_ASM
	B PB1
	
uni_sec:
	MOV R5, #2
	CMP R12, #9	
	MOVGE R12, #0 //一轮结束
	BLGE HEX_write_ASM
	BGE dec_sec
	ADDLE R12, R12, #1
	MOVLE R11, R12
	BLLE HEX_write_ASM
	MOV R11, #0 //CLEAR!!!!
	B PB1

dec_sec:
	MOV R5, #3
	CMP R7, #5	
	MOVGE R7, #0 //一轮结束
	BLGE HEX_write_ASM
	BGE uni_min
	ADDLE R7, R7, #1
	MOVLE R11, R7
	BLLE HEX_write_ASM
	MOV R11, #0
	B PB1

uni_min:
	MOV R5, #4
	CMP R8, #9	
	MOVGE R8, #0 //一轮结束
	BLGE HEX_write_ASM
	BGE dec_min
	ADDLE R8, R8, #1
	MOVLE R11, R8
	BLLE HEX_write_ASM
	MOV R11, #0
	B PB1
	
dec_min:
	MOV R5, #5
	CMP R9, #5	
	MOVGE R8, #0 //一轮结束
	BLGE HEX_write_ASM
	BGE hour
	ADDLE R9, R9, #1
	MOVLE R11, R9
	BLLE HEX_write_ASM
	MOV R11, #0
	B PB1

hour:
	MOV R5, #6
	CMP R10, #9	
	MOVGE R10, #0 //一轮结束
	BLGE HEX_write_ASM
	BGE dec_min
	ADDLE R10, R10, #1
	MOVLE R11, R10
	BLLE HEX_write_ASM
	MOV R11, #0
	B PB1
		
	
HEX_write_ASM:
	PUSH {R5, R6, R7, R8, R9, R10, R11, R12, LR}
	LDR R2, =HEX0_TO_3
	
ZERO:
	CMP R11, #0x0
	BNE ONE 
	MOVEQ R6, #0x3f
	B HEX_TO_WRITE

ONE:	
	CMP R11, #0x1
	BNE TWO //not one, go to next
	MOVEQ R6, #0x06
	B HEX_TO_WRITE

TWO:
	CMP R11, #0x2
	BNE THREE
	MOVEQ R6, #0x5B
	B HEX_TO_WRITE

THREE:
	CMP R11, #0x3
	BNE FOUR
	MOVEQ R6, #0X4F
	B HEX_TO_WRITE
	
FOUR:
	CMP R11, #0x4
	BNE FIVE
	MOVEQ R6, #0x66
	B HEX_TO_WRITE
	
FIVE:
	CMP R11, #0x5
	BNE SIX
	MOVEQ R6, #0x6D
	B HEX_TO_WRITE

SIX:
	CMP R11, #0x6
	BNE SEVEN
	MOVEQ R6, #0x7D
	B HEX_TO_WRITE
	
SEVEN:
	CMP R11, #0x7
	BNE EIGHT
	MOVEQ R6, #0x07
	B HEX_TO_WRITE
	
EIGHT:
	CMP R11, #0x8
	BNE NINE
	MOVEQ R6, #0x7F
	B HEX_TO_WRITE
	
NINE:
	CMP R11, #0x9
	BNE ZERO_TEN
	MOVEQ R6, #0x67
	B HEX_TO_WRITE
		
ZERO_TEN:
	CMP R11, #10
	BNE ONE 
	MOVEQ R6, #0x3f
	B HEX_TO_WRITE
		
HEX_TO_WRITE:
	CMP R5, #1 //write on hex0: milisec
	STREQB R6, [R2]
	//ADD R2,R2,#1 //store b by b, not clear the one before as needed!
	BEQ BACK
	
	CMP R5, #2
	//*LSLEQ R6,R6, #8
	ADD R2,R2,#1
	STREQB R6, [R2]
	BEQ BACK
	
	CMP R5, #3
	//LSLEQ R6,R6, #16
	ADD R2,R2,#1
	STREQB R6, [R2]
	BEQ BACK
	
	CMP R5, #4
	//LSLEQ R6,R6, #24	
	ADD R2,R2,#1
	STREQB R6, [R2]
	BEQ BACK
	
	CMP	R5, #5
	LDREQ R2, =HEX4_TO_5
	STREQB R6, [R2]
	BEQ BACK
	
	CMP R5, #6
	LDREQ R2, =HEX4_TO_5
	ADDEQ R2,R2,#1
	STREQB R6, [R2]
	BEQ BACK
	
BACK:
	POP {R5, R6, R7, R8, R9, R10, R11, R12, LR}
	BX LR	
	
////////////-------------------------------------------------------////////////////////////

ARM_TIM_config_ASM: 
	PUSH {R0, R1, R11, LR}
	LDR R0, =LOAD_REG
	LDR R1, =#20000000
	STR R1, [R0]
	
	MOV R11, #0
	
	LDR R0, =CTR_REG
	MOV R1, #0b11
	STR R1, [R0]
	POP {R0, R1, R11, LR}
	BX LR

ARM_TIM_read_INT_ASM: 
	PUSH {LR}
	LDR R3, =INT_REG
	LDR R3, [R3]
	POP {LR}
	BX LR
	
ARM_TIM_clear_INT_ASM:
	PUSH {R0, R1, LR}
	LDR R0, =INT_REG
	MOV R1, #1
	STRB R1, [R0]
	POP {R0, R1, LR}
	BX LR
	
