.global _start
.equ PIX_ADDR, 0xC8000000
.equ CHAR_ADDR, 0xC9000000
.equ size, 319
.equ PS2_DATA, 0xFF200100

_start:
        bl      input_loop
end:
        b       end

@ TODO: copy VGA driver here.
VGA_draw_point_ASM:
	PUSH {R3,R4,R5,R6,R7,LR}
	
	LDR R3, =PIX_ADDR
	LDR R4, =size //319 > 255, cannot be moved in a register as an imm value
	CMP R0, R4
	BGT ERROR 
	
	CMP R1, #239
	BGT ERROR
	
	LSL R6, R0, #1 //X (start with X=0, next time it will move to X=2)
	LSL R7, R1, #10 //Y
	
	ADD R5, R6, R7 //shiftedX+shiftedY
	ADD R5, R5, R3 //base_addr + shiftedX + shiftedY (offset of pixel)
	STRLEH R2, [R5]	
	POP {R3,R4,R5,R6,R7,LR}
	BX LR
	
VGA_clear_pixelbuff_ASM:	
	PUSH {R3,LR}
	LDR R3, =size
	MOV R0, #0
	MOV R1, #0
	MOV R2, #0

	Y_LOOP:
	MOV R0, #0
	CMP R1, #239
	BLE X_LOOP
	BGT END_CLEAR
	
	X_LOOP:
	CMP R0, R3
	ADDGT R1, R1, #1
	BGT Y_LOOP
	BL VGA_draw_point_ASM
	ADD R0, R0, #1
	B X_LOOP
	
	END_CLEAR:
	POP {R3,LR}
	BX LR

VGA_write_char_ASM:
	PUSH {R3,R5,R6,R7,LR}
	
	LDR R3, =CHAR_ADDR
	
	CMP R0, #79
	BGT ERROR
	
	CMP R1, #59
	BGT ERROR
	
	LSL R6, R0, #0 //X
	LSL R7, R1, #7 //Y
	
	ADD R5, R6, R7 //[shiftedX+shiftedY]
	ADD R5, R5, R3
	STRLEB R2, [R5]
	POP {R3,R5,R6,R7,LR}
	BX LR
	
VGA_clear_charbuff_ASM:
	PUSH {LR}
	MOV R0, #0
	MOV R1, #0
	MOV R2, #32

	YC_LOOP:
	MOV R0, #0
	CMP R1, #59
	BLE XC_LOOP
	BGT END_CLEARC
	
	XC_LOOP:
	CMP R0, #79
	ADDGT R1, R1, #1
	BGT YC_LOOP
	BL VGA_write_char_ASM
	ADD R0, R0, #1
	B XC_LOOP
	
	END_CLEARC:
	POP {LR}
	BX LR

ERROR:
	B ERROR
	
@ TODO: insert PS/2 driver here.
//R0: input, store read data from PS/2 into it.
	//output, tell data read is valid or not
	//check RVALID
read_PS2_data_ASM:
	PUSH {R3,R4,R5}
	LDR R3, =PS2_DATA
	LDR R5, [R3]
	MOV R4, R5
	LSR R4,R4,#15
	ANDS R4, R4, #1
	STRNEB R5, [R0]
	MOVNE R0, #1
	MOVEQ R0, #0

	POP {R3,R4,R5}
	BX LR
write_hex_digit:
        push    {r4, lr}
        cmp     r2, #9
        addhi   r2, r2, #55
        addls   r2, r2, #48
        and     r2, r2, #255
        bl      VGA_write_char_ASM
        pop     {r4, pc}
write_byte:
        push    {r4, r5, r6, lr}
        mov     r5, r0
        mov     r6, r1
        mov     r4, r2
        lsr     r2, r2, #4
        bl      write_hex_digit
        and     r2, r4, #15
        mov     r1, r6
        add     r0, r5, #1
        bl      write_hex_digit
        pop     {r4, r5, r6, pc}
input_loop:
        push    {r4, r5, lr}
        sub     sp, sp, #12
        bl      VGA_clear_pixelbuff_ASM
        bl      VGA_clear_charbuff_ASM
        mov     r4, #0
        mov     r5, r4
        b       .input_loop_L9
.input_loop_L13:
        ldrb    r2, [sp, #7]
        mov     r1, r4
        mov     r0, r5
        bl      write_byte
        add     r5, r5, #3
        cmp     r5, #79
        addgt   r4, r4, #1
        movgt   r5, #0
.input_loop_L8:
        cmp     r4, #59
        bgt     .input_loop_L12
.input_loop_L9:
        add     r0, sp, #7
        bl      read_PS2_data_ASM
        cmp     r0, #0
        beq     .input_loop_L8
        b       .input_loop_L13
.input_loop_L12:
        add     sp, sp, #12
        pop     {r4, r5, pc}
